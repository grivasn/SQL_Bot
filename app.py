import streamlit as st
from supabase import create_client, Client
import pandas as pd
from dotenv import load_dotenv
import os
from openai import OpenAI

load_dotenv()
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")


if not all([SUPABASE_URL, SUPABASE_KEY, OPENROUTER_API_KEY]):
    st.error("API anahtarlarÄ± eksik. .env dosyasÄ±nÄ± kontrol edin.")
    st.stop()

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

st.set_page_config(
    page_title="SatÄ±ÅŸ Analiz Botu",
    page_icon="ðŸ“Š",
    layout="centered"
)

st.markdown("""
    <style>
        body {
            background: linear-gradient(135deg, #003366, #ffffff);
            height: 100vh;
            margin: 0;
        }
        .main {
            background: transparent;
        }
        h1 {
            background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(9, 9, 121, 1) 35%, rgba(0, 212, 255, 1) 100%);
            padding: 1rem;
            border-radius: 16px;
            color: white !important;
            text-align: center;
            box-shadow: 0px 4px 16px rgba(0,0,0,0.05);
        }
        .stButton > button {
            background-color: #003366;
            color: white;
            border-radius: 10px;
            font-weight: bold;
            padding: 0.6rem 1.5rem;
            border: none;
        }
        .stTextInput > div > input {
            border-radius: 10px;
            border: 1px solid #cbd5e0;
        }
        .input-button-container {
            display: flex;
            gap: 1rem;
            max-width: 700px;
            margin-top: 20px;
        }
        .input-button-container > div:first-child {
            flex-grow: 1;
        }
        .input-button-container > div:last-child {
            flex: 0 0 120px;
        }
    </style>
""", unsafe_allow_html=True)

st.markdown("<h1>SatÄ±ÅŸ Analiz Botu</h1>", unsafe_allow_html=True)

if "prompt_history" not in st.session_state:
    st.session_state["prompt_history"] = []
if "response_history" not in st.session_state:
    st.session_state["response_history"] = []

sidebar = st.sidebar
sidebar.header("Komut GeÃ§miÅŸi")
for i, p in enumerate(reversed(st.session_state["prompt_history"][-20:]), 1):
    sidebar.write(f"{i}. {p[:100]}...")

# sidebar.header("Son 5 Analiz Sonucu")
# for i, r in enumerate(reversed(st.session_state["response_history"][-5:]), 1):
#     sidebar.write(f"{i}. {r[:100]}...")

with st.container():
    st.markdown('<div class="input-button-container">', unsafe_allow_html=True)
    user_prompt = st.text_input("Analiz komutunuzu yazÄ±n", key="user_prompt", label_visibility="collapsed", placeholder="Ã–rneÄŸin: En Ã§ok satan Ã¼rÃ¼nleri listele")
    analyze_clicked = st.button("Analiz Et")
    st.markdown("</div>", unsafe_allow_html=True)

def get_sales_data():
    """Supabase'den tÃ¼m satÄ±ÅŸ verilerini Ã§eker."""
    try:
        response = supabase.from_("sales").select("*").execute()
        
        if not response.data:
            st.warning("Veri bulunamadÄ±")
            return None
            
        sales_data = pd.DataFrame(response.data)
        print(f"Veri Ã§ekildi: {len(sales_data)} satÄ±r") 
        return sales_data
        
    except Exception as e:
        st.error(f"Hata: {str(e)}")
        return None

def save_response_to_supabase(prompt, response):
    """Analiz sonuÃ§larÄ±nÄ± Supabase'e kaydeder."""
    try:
        supabase.table("responses").insert({
            "user_prompt": prompt,
            "response": response,
            "created_at": pd.Timestamp.now().isoformat()
        }).execute()
    except Exception as e:
        st.error(f"Cevap kaydetme hatasÄ±: {str(e)}")

def get_last_5_responses():
    """Supabase'den son 5 cevabÄ± Ã§eker."""
    try:
        response = supabase.table("responses").select("response").order("created_at", desc=True).limit(5).execute()
        return [r["response"] for r in response.data]
    except Exception as e:
        st.error(f"Son cevaplarÄ± alma hatasÄ±: {str(e)}")
        return []

def analyze_with_deepseek(data: pd.DataFrame, prompt: str):
    """DeepSeek ile satÄ±ÅŸ verilerini analiz eder."""
    try:
        data_str = data.to_markdown(index=False)
        last_5_responses = st.session_state.get("response_history", [])[-5:]
        response_context = "\n\n### Ã–nceki 5 Analiz Sonucu:\n" + "\n".join([f"{i+1}. {r[:200]}..." for i, r in enumerate(last_5_responses)]) if last_5_responses else "Ã–nceki analiz sonucu yok."
        
        full_prompt = f"""
        Sen bir profesyonel satÄ±ÅŸ analiz asistanÄ±sÄ±n. GÃ¶revin, yalnÄ±zca verilen satÄ±ÅŸ verisi tablosuna dayanarak kullanÄ±cÄ±nÄ±n komutunu analiz etmek ve sonuÃ§larÄ± net, anlaÅŸÄ±lÄ±r ve profesyonel bir TÃ¼rkÃ§e ile sunmak. AÅŸaÄŸÄ±daki kurallara sÄ±kÄ± sÄ±kÄ±ya uy:

        ### Kurallar:
        1. **Veriye BaÄŸlÄ±lÄ±k**: Analizini yalnÄ±zca verilen tablodaki verilere dayandÄ±r. Tabloda olmayan hiÃ§bir bilgiyi varsayma veya uydurma.
        2. **Analiz TÃ¼rleri**: 
           - Tabloda varsa `adet` ,`urun`, `fiyat`, `tarih`, `temsilci` gibi sÃ¼tunlara gÃ¶re:
             - Toplam satÄ±ÅŸ tutarÄ±, ortalama satÄ±ÅŸ, en Ã§ok satan Ã¼rÃ¼nler, satÄ±ÅŸ yoÄŸunluÄŸu gibi temel metrikleri hesapla.
             - Zaman bazlÄ± trendler (gÃ¼n, hafta, ay, yÄ±l gibi) analiz et (eÄŸer tarih verisi varsa).
             - ÃœrÃ¼n veya kategori bazlÄ± karÅŸÄ±laÅŸtÄ±rmalar yap.
             - SatÄ±ÅŸ performansÄ±nÄ± etkileyen faktÃ¶rleri (Ã¶r. popÃ¼ler Ã¼rÃ¼nler, dÃ¼ÅŸÃ¼k performanslÄ± kategoriler) belirle.
        3. **Eksik Veri**: Tabloda eksik veri varsa bunu aÃ§Ä±kÃ§a belirt, ancak analizini engelleme; mevcut verilerle en iyi sonucu Ã¼ret.
        4. **Ã‡Ä±ktÄ± FormatÄ±**: 
           - SonuÃ§larÄ± dÃ¼zenli, yapÄ±landÄ±rÄ±lmÄ±ÅŸ ve profesyonel bir ÅŸekilde sun:
             - **BaÅŸlÄ±k**: Analizin ana konusunu Ã¶zetleyen bir baÅŸlÄ±k.
             - **Ã–zet**: KullanÄ±cÄ±nÄ±n komutuna yanÄ±t olarak kÄ±sa bir Ã¶zet (2-3 cÃ¼mle).
             - **DetaylÄ± Bulgular**: Liste veya paragraflarla, hesaplamalar ve bulgularÄ± net bir ÅŸekilde aÃ§Ä±kla.
             - **Ã–neriler**: Analize dayalÄ± 1-2 uygulanabilir iÅŸ Ã¶nerisi sun.
             - **GÃ¶rselleÅŸtirme Ã–nerisi**: Veriye uygun grafik tÃ¼rleri Ã¶ner (Ã¶r. "Bu veri iÃ§in bir Ã§ubuk grafik uygun olur").
        5. **Dil ve Ton**: Profesyonel, sade ve rehber bir dil kullan. KarmaÅŸÄ±k terimlerden kaÃ§Ä±n, her seviyeden kullanÄ±cÄ±nÄ±n anlayabileceÄŸi ÅŸekilde yaz.
        6. **Hata KontrolÃ¼**: Veride anormallikler (negatif fiyat, mantÄ±ksÄ±z tarihler vb.) varsa bunlarÄ± belirt ve analizini buna gÃ¶re uyar.
        7. **BaÄŸlam**: Ã–nceki analiz sonuÃ§larÄ±nÄ± dikkate alarak tutarlÄ± bir analiz yap.

        ### KullanÄ±cÄ±nÄ±n Komutu:
        {prompt}

        ### SatÄ±ÅŸ Verisi (Markdown formatÄ±nda):
        {data_str}

        ### Ã–nceki Analiz BaÄŸlamÄ±:
        {response_context}

        ### Ã‡Ä±ktÄ± YapÄ±sÄ±:
        - **Analiz BaÅŸlÄ±ÄŸÄ±**: [Komutun Ã¶zeti]
        - **Ã–zet**: [Komutun neyi istediÄŸini ve ana bulgularÄ± Ã¶zetle]
        - **DetaylÄ± Bulgular**: 
          - [Madde madde veya paragraflarla analiz sonuÃ§larÄ±]
        - **Ä°ÅŸ Ã–nerileri**: [Analize dayalÄ± Ã¶neriler]
        - **GÃ¶rselleÅŸtirme Ã–nerisi**: [Veriye uygun grafik tÃ¼rÃ¼]

        LÃ¼tfen yukarÄ±daki kurallara uygun olarak analizini gerÃ§ekleÅŸtir ve sonuÃ§larÄ± belirtilen formatta sun.
        """
        completion = client.chat.completions.create(
            model="deepseek/deepseek-chat-v3-0324:free",
            messages=[
                {"role": "system", "content": "Sen yalnÄ±zca verilen satÄ±ÅŸ verisine gÃ¶re analiz yapan bir asistansÄ±n."},
                {"role": "user", "content": full_prompt}
            ],
            extra_headers={
                "HTTP-Referer": "https://sales-analytics.com",
                "X-Title": "Sales Analiz Botu"
            }
        )
        return completion.choices[0].message.content
    except Exception as e:
        return f"Analiz hatasÄ±: {str(e)}"

if analyze_clicked:
    if user_prompt.strip() == "":
        st.warning("LÃ¼tfen bir analiz komutu girin.")
    else:
        sales_data = get_sales_data()
        if sales_data is not None:
            with st.spinner("Analiz yapÄ±lÄ±yor..."):
                result = analyze_with_deepseek(sales_data, user_prompt)
                st.success("Analiz tamamlandÄ±")
                st.markdown(result)
          
                st.session_state["response_history"].append(result)
                if len(st.session_state["response_history"]) > 5:
                    st.session_state["response_history"] = st.session_state["response_history"][-5:]
                st.session_state["prompt_history"].append(user_prompt)
                save_response_to_supabase(user_prompt, result)
        else:
            st.error("Veri alÄ±namadÄ±.")